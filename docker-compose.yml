services:
  postgres:
    image: postgres:15-alpine
    container_name: voice-stack-postgres
    environment:
      POSTGRES_DB: synapse
      POSTGRES_USER: synapse
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-synapse_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - voice-stack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synapse"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${POSTGRES_PORT:-5432}:5432"

  redis:
    image: redis:7-alpine
    container_name: voice-stack-redis
    volumes:
      - redis_data:/data
    networks:
      - voice-stack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${REDIS_PORT:-6379}:6379"

  synapse:
    image: matrixdotorg/synapse:latest
    container_name: voice-stack-synapse
    environment:
      SYNAPSE_CONFIG_DIR: /data
      SYNAPSE_CONFIG_PATH: /data/homeserver.yaml
      SYNAPSE_SERVER_NAME: ${SYNAPSE_SERVER_NAME:-matrix.example.com}
      SYNAPSE_REPORT_STATS: ${SYNAPSE_REPORT_STATS:-no}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-synapse_password}
      REGISTRATION_SHARED_SECRET: ${REGISTRATION_SHARED_SECRET:-}
      # Ensure TRUSTED_KEY_SERVERS is a string that sed can insert directly.
      # Example: '["matrix.org","server.name"]'. Default: '["matrix.org"]'
      TRUSTED_KEY_SERVERS: '${TRUSTED_KEY_SERVERS:-[\"matrix.org\"]}'
      ENABLE_REGISTRATION: ${ENABLE_REGISTRATION:-false}
      ALLOW_GUEST_ACCESS: ${ALLOW_GUEST_ACCESS:-false}
      URL_PREVIEW_ENABLED: ${URL_PREVIEW_ENABLED:-false}
      REQUIRE_IDENTITY_SERVER: ${REQUIRE_IDENTITY_SERVER:-false}
    volumes:
      - synapse_data:/data
      - media_store:/data/media_store
    ports:
      - "${SYNAPSE_PORT:-8008}:8008"
    networks:
      - voice-stack-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fSs", "http://localhost:8008/health"]
      interval: 15s
      timeout: 5s
      retries: 3
    command: |
      if [ ! -f /data/homeserver.yaml ]; then
        echo "Generating Synapse homeserver.yaml..."
        python -m synapse.app.homeserver \
          --server-name "${SYNAPSE_SERVER_NAME}" \
          --config-path /data/homeserver.yaml \
          --generate-config \
          --report-stats="${SYNAPSE_REPORT_STATS}"

        echo "Updating homeserver.yaml for PostgreSQL..."
        TMP_CONFIG="/data/homeserver.yaml.tmp"
        # Awk script is now directly in the shell script, no need for sh -c escaping
        awk -v pg_password="${POSTGRES_PASSWORD}" '
          BEGIN {p=1}
          /^database:/ {
            print "database:"; print "  name: psycopg2"; print "  args:";
            print "    user: synapse"; print "    password: " pg_password;
            print "    database: synapse"; print "    host: postgres";
            print "    cp_min: 5"; print "    cp_max: 10";
            p=0
          }
          /^(  args:|  user:|  password:|  database:|  host:|  cp_min:|  cp_max:)/ {next}
          /^  name: sqlite3/ {next}
          {if(p)print}
          /^[a-zA-Z_]+:/ {p=1}
        ' /data/homeserver.yaml > "${TMP_CONFIG}" && mv "${TMP_CONFIG}" /data/homeserver.yaml

        echo "Adding Redis configuration to homeserver.yaml..."
        {
          echo "redis:"
          echo "  enabled: true"
          echo "  host: redis"
          echo "  port: 6379"
        } >> /data/homeserver.yaml

        echo "Adding TURN server configuration to homeserver.yaml..."
        {
          echo "turn_uris:"
          # Literal single quotes for YAML are tricky with echo. 
          # Using printf for more robust quoting.
          printf "  - ''turn:%s:3478?transport=udp''\n" "${SYNAPSE_SERVER_NAME}" >> /data/homeserver.yaml
          printf "  - ''turn:%s:3478?transport=tcp''\n" "${SYNAPSE_SERVER_NAME}" >> /data/homeserver.yaml
          echo "turn_user_lifetime: 86400000" >> /data/homeserver.yaml
          echo "turn_allow_guests: true" >> /data/homeserver.yaml
          printf "turn_shared_secret: ''%s''\n" "${COTURN_STATIC_AUTH_SECRET:-turn_secret}" >> /data/homeserver.yaml
        } >> /data/homeserver.yaml # This was an error, should append to homeserver.yaml

        if [ -n "${REGISTRATION_SHARED_SECRET}" ]; then
          echo "Adding registration_shared_secret to homeserver.yaml..."
          printf "registration_shared_secret: ''%s''\n" "${REGISTRATION_SHARED_SECRET}" >> /data/homeserver.yaml
        fi

        echo "Updating trusted_key_servers in homeserver.yaml..."
        sed -i "s|^trusted_key_servers:.*|trusted_key_servers: ${TRUSTED_KEY_SERVERS}|" /data/homeserver.yaml

        echo "Applying family-safe defaults to homeserver.yaml..."
        sed -i "s/^enable_registration:.*/enable_registration: ${ENABLE_REGISTRATION:-false}/" /data/homeserver.yaml
        sed -i "s/^allow_guest_access:.*/allow_guest_access: ${ALLOW_GUEST_ACCESS:-false}/" /data/homeserver.yaml
        sed -i "s/^url_preview_enabled:.*/url_preview_enabled: ${URL_PREVIEW_ENABLED:-false}/" /data/homeserver.yaml
        
        if [ "${REQUIRE_IDENTITY_SERVER:-false}" = "true" ]; then
          sed -i 's/require_identity_server: false/require_identity_server: true/' /data/homeserver.yaml
        else
          sed -i 's/require_identity_server: true/require_identity_server: false/' /data/homeserver.yaml
        fi
        echo "Synapse configuration complete."
      fi
      echo "Starting Synapse..."
      exec python -m synapse.app.homeserver --config-path /data/homeserver.yaml

  coturn:
    image: coturn/coturn:latest
    container_name: voice-stack-coturn
    environment:
      STATIC_AUTH_SECRET: ${COTURN_STATIC_AUTH_SECRET:-turn_secret}
      SYNAPSE_SERVER_NAME: ${SYNAPSE_SERVER_NAME:-matrix.example.com}
      COTURN_EXTERNAL_IP: ${COTURN_EXTERNAL_IP:-auto} 
      COTURN_MIN_PORT: ${COTURN_MIN_PORT:-49152}
      COTURN_MAX_PORT: ${COTURN_MAX_PORT:-49172}
      COTURN_PORT: ${COTURN_PORT:-3478}
      COTURN_TLS_PORT: ${COTURN_TLS_PORT:-5349}
    volumes:
      - coturn_data:/var/lib/coturn
    ports:
      - "${COTURN_MIN_PORT:-49152}-${COTURN_MAX_PORT:-49172}:${COTURN_MIN_PORT:-49152}-${COTURN_MAX_PORT:-49172}/udp"
      - "${COTURN_PORT:-3478}:3478/udp"
      - "${COTURN_PORT:-3478}:3478/tcp"
      - "${COTURN_TLS_PORT:-5349}:5349/udp"
      - "${COTURN_TLS_PORT:-5349}:5349/tcp"
    networks:
      - voice-stack-network
    restart: unless-stopped
    command:
      - "-n"
      - "--log-file=stdout"
      - "--min-port=${COTURN_MIN_PORT:-49152}"
      - "--max-port=${COTURN_MAX_PORT:-49172}"
      - "--use-auth-secret"
      - "--static-auth-secret=${COTURN_STATIC_AUTH_SECRET:-turn_secret}"
      - "--realm=${SYNAPSE_SERVER_NAME:-matrix.example.com}"
      - "--no-tls"
      - "--no-dtls"
      - "--no-cli"
      # Conditionally add --external-ip based on COTURN_EXTERNAL_IP value in entrypoint or wrapper script if complex logic needed.
      # For now, if COTURN_EXTERNAL_IP is set to an IP, it should be passed directly. If 'auto', coturn handles it.
      # Example: if [ "$COTURN_EXTERNAL_IP" != "auto" ]; then CMD_ARGS="$CMD_ARGS --external-ip=$COTURN_EXTERNAL_IP"; fi

  element:
    image: nginx:alpine
    container_name: voice-stack-element
    environment:
      SYNAPSE_SERVER_NAME: ${SYNAPSE_SERVER_NAME:-matrix.example.com}
      ELEMENT_JITSI_DOMAIN: ${ELEMENT_JITSI_DOMAIN:-meet.element.io}
      ELEMENT_VERSION: ${ELEMENT_VERSION:-v1.11.50}
    volumes:
      - element_data:/usr/share/nginx/html
    networks:
      - voice-stack-network
    ports:
      - "${ELEMENT_PORT:-8080}:80"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80/config.json"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command:
      - sh
      - -c
      - |
        set -e
        ELEMENT_WEB_DIR="/usr/share/nginx/html"
        CONFIG_JSON_PATH="${ELEMENT_WEB_DIR}/config.json"

        mkdir -p "$ELEMENT_WEB_DIR"

        if [ ! -f "${ELEMENT_WEB_DIR}/index.html" ] || [ ! -f "${CONFIG_JSON_PATH}" ]; then
          echo "Element web not found or config.json missing. Downloading Element ${ELEMENT_VERSION}..."
          wget -qO /tmp/element-web.tar.gz "https://github.com/vector-im/element-web/releases/download/${ELEMENT_VERSION}/element-${ELEMENT_VERSION}.tar.gz"
          
          rm -rf "${ELEMENT_WEB_DIR:?}/"* 
          tar -xzf /tmp/element-web.tar.gz -C "$ELEMENT_WEB_DIR" --strip-components=1
          rm /tmp/element-web.tar.gz

          echo "Creating ${CONFIG_JSON_PATH}..."
          # Rebuilding config.json with echo.
          # Double quotes for echo strings with env vars, single for fixed strings.
          echo '{' > "${CONFIG_JSON_PATH}"
          echo '    "default_server_config": {' >> "${CONFIG_JSON_PATH}"
          echo '        "m.homeserver": {' >> "${CONFIG_JSON_PATH}"
          echo "            \\"base_url\\": \\"http://${SYNAPSE_SERVER_NAME}\\", " >> "${CONFIG_JSON_PATH}"
          echo "            \\"server_name\\": \\"${SYNAPSE_SERVER_NAME}\\"" >> "${CONFIG_JSON_PATH}"
          echo '        },' >> "${CONFIG_JSON_PATH}"
          echo '        "m.identity_server": {' >> "${CONFIG_JSON_PATH}"
          echo '            "base_url": "https://vector.im"' >> "${CONFIG_JSON_PATH}"
          echo '        }' >> "${CONFIG_JSON_PATH}"
          echo '    },' >> "${CONFIG_JSON_PATH}"
          echo '    "brand": "Element",' >> "${CONFIG_JSON_PATH}"
          echo '    "integrations_ui_url": "https://scalar.vector.im/",' >> "${CONFIG_JSON_PATH}"
          echo '    "integrations_rest_url": "https://scalar.vector.im/api",' >> "${CONFIG_JSON_PATH}"
          echo '    "integrations_widgets_urls": [' >> "${CONFIG_JSON_PATH}"
          echo '        "https://scalar.vector.im/api/widgets"' >> "${CONFIG_JSON_PATH}"
          echo '    ],' >> "${CONFIG_JSON_PATH}"
          echo '    "hosting_signup_link": "https://element.io/get-started",' >> "${CONFIG_JSON_PATH}"
          echo '    "bug_report_endpoint_url": "https://element.io/bugreports/submit",' >> "${CONFIG_JSON_PATH}"
          echo '    "default_country_code": "GB",' >> "${CONFIG_JSON_PATH}"
          echo '    "show_labs_settings": false,' >> "${CONFIG_JSON_PATH}"
          echo '    "features": {' >> "${CONFIG_JSON_PATH}"
          echo '        "feature_groups": "labs",' >> "${CONFIG_JSON_PATH}"
          echo '        "feature_pinning": "labs",' >> "${CONFIG_JSON_PATH}"
          echo '        "feature_custom_status": "labs",' >> "${CONFIG_JSON_PATH}"
          echo '        "feature_custom_tags": "labs",' >> "${CONFIG_JSON_PATH}"
          echo '        "feature_state_counters": "labs"' >> "${CONFIG_JSON_PATH}"
          echo '    },' >> "${CONFIG_JSON_PATH}"
          echo '    "default_theme": "light",' >> "${CONFIG_JSON_PATH}"
          echo '    "room_directory": {' >> "${CONFIG_JSON_PATH}"
          echo '        "servers": [' >> "${CONFIG_JSON_PATH}"
          echo '            "matrix.org"' >> "${CONFIG_JSON_PATH}"
          echo '        ]' >> "${CONFIG_JSON_PATH}"
          echo '    },' >> "${CONFIG_JSON_PATH}"
          echo '    "enable_presence_by_hs_url": {' >> "${CONFIG_JSON_PATH}"
          echo '        "https://matrix.org": false,' >> "${CONFIG_JSON_PATH}"
          echo '        "https://matrix-client.matrix.org": false' >> "${CONFIG_JSON_PATH}"
          echo '    },' >> "${CONFIG_JSON_PATH}"
          echo '    "setting_defaults": {' >> "${CONFIG_JSON_PATH}"
          echo '        "breadcrumbs": true,' >> "${CONFIG_JSON_PATH}"
          echo '        "UIFeature.voipCallExperience": true' >> "${CONFIG_JSON_PATH}"
          echo '    },' >> "${CONFIG_JSON_PATH}"
          echo '    "jitsi": {' >> "${CONFIG_JSON_PATH}"
          echo "        \\"preferred_domain\\": \\"${ELEMENT_JITSI_DOMAIN}\\"" >> "${CONFIG_JSON_PATH}"
          echo '    }' >> "${CONFIG_JSON_PATH}"
          echo '}' >> "${CONFIG_JSON_PATH}"

          echo "Element configuration complete."
        else
          echo "Element web and config.json found. Skipping download and generation."
        fi
        
        echo "Starting Nginx for Element..."
        exec nginx -g 'daemon off;'

volumes:
  postgres_data:
  redis_data:
  synapse_data:
  media_store:
  coturn_data:
  element_data:

networks:
  voice-stack-network:
    driver: bridge
