services:
  postgres:
    image: postgres:15-alpine
    container_name: voice-stack-postgres
    environment:
      POSTGRES_DB: synapse
      POSTGRES_USER: synapse
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-synapse_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - voice-stack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synapse"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${POSTGRES_PORT:-5432}:5432"

  redis:
    image: redis:7-alpine
    container_name: voice-stack-redis
    volumes:
      - redis_data:/data
    networks:
      - voice-stack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${REDIS_PORT:-6379}:6379"

  synapse:
    image: matrixdotorg/synapse:latest
    container_name: voice-stack-synapse
    environment:
      SYNAPSE_CONFIG_DIR: /data
      SYNAPSE_CONFIG_PATH: /data/homeserver.yaml
      SYNAPSE_SERVER_NAME: ${SYNAPSE_SERVER_NAME:-matrix.example.com}
      SYNAPSE_REPORT_STATS: ${SYNAPSE_REPORT_STATS:-no}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-synapse_password}
      REGISTRATION_SHARED_SECRET: ${REGISTRATION_SHARED_SECRET:-}
      # Ensure TRUSTED_KEY_SERVERS is a string that sed can insert directly.
      # Example: '["matrix.org","server.name"]'. Default: '["matrix.org"]'
      TRUSTED_KEY_SERVERS: '${TRUSTED_KEY_SERVERS:-[\"matrix.org\"]}'
      ENABLE_REGISTRATION: ${ENABLE_REGISTRATION:-false}
      ALLOW_GUEST_ACCESS: ${ALLOW_GUEST_ACCESS:-false}
      URL_PREVIEW_ENABLED: ${URL_PREVIEW_ENABLED:-false}
      REQUIRE_IDENTITY_SERVER: ${REQUIRE_IDENTITY_SERVER:-false}
      COTURN_STATIC_AUTH_SECRET: ${COTURN_STATIC_AUTH_SECRET:-turn_secret}
    volumes:
      - synapse_data:/data
      - media_store:/data/media_store
    ports:
      - "${SYNAPSE_PORT:-8008}:8008"
    networks:
      - voice-stack-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fSs", "http://localhost:8008/health"]
      interval: 15s
      timeout: 5s
      retries: 3
    command:
      - sh
      - -c
      - |
        # Generate homeserver.yaml if it doesn't exist
        if [ ! -f /data/homeserver.yaml ]; then
          echo "Generating Synapse homeserver.yaml..."
          python -m synapse.app.homeserver \
            --server-name "${SYNAPSE_SERVER_NAME}" \
            --config-path /data/homeserver.yaml \
            --generate-config \
            --report-stats="${SYNAPSE_REPORT_STATS}"
        fi
        
        # Fix bind_addresses to allow external connections
        sed -i "s/bind_addresses: \['::1', '127.0.0.1'\]/bind_addresses: ['0.0.0.0']/" /data/homeserver.yaml
          # Add suppress_key_server_warning if not present
        if ! grep -q "suppress_key_server_warning" /data/homeserver.yaml; then
          echo "suppress_key_server_warning: true" >> /data/homeserver.yaml
        fi
        
        # Update registration settings
        sed -i "s/^enable_registration:.*/enable_registration: ${ENABLE_REGISTRATION}/" /data/homeserver.yaml
        
        # Add registration shared secret if provided
        if [ -n "${REGISTRATION_SHARED_SECRET}" ] && ! grep -q "registration_shared_secret" /data/homeserver.yaml; then
          echo "registration_shared_secret: \"${REGISTRATION_SHARED_SECRET}\"" >> /data/homeserver.yaml
        fi
        
        # Start Synapse
        exec python -m synapse.app.homeserver --config-path /data/homeserver.yaml

  coturn:
    image: coturn/coturn:latest
    container_name: voice-stack-coturn
    environment:
      STATIC_AUTH_SECRET: ${COTURN_STATIC_AUTH_SECRET:-turn_secret}
      SYNAPSE_SERVER_NAME: ${SYNAPSE_SERVER_NAME:-matrix.example.com}
      COTURN_EXTERNAL_IP: ${COTURN_EXTERNAL_IP:-auto} 
      COTURN_MIN_PORT: ${COTURN_MIN_PORT:-49152}
      COTURN_MAX_PORT: ${COTURN_MAX_PORT:-49172}
      COTURN_PORT: ${COTURN_PORT:-3478}
      COTURN_TLS_PORT: ${COTURN_TLS_PORT:-5349}
    volumes:
      - coturn_data:/var/lib/coturn
    ports:
      - "${COTURN_MIN_PORT:-49152}-${COTURN_MAX_PORT:-49172}:${COTURN_MIN_PORT:-49152}-${COTURN_MAX_PORT:-49172}/udp"
      - "${COTURN_PORT:-3478}:3478/udp"
      - "${COTURN_PORT:-3478}:3478/tcp"
      - "${COTURN_TLS_PORT:-5349}:5349/udp"
      - "${COTURN_TLS_PORT:-5349}:5349/tcp"
    networks:
      - voice-stack-network
    restart: unless-stopped
    command:
      - "-n"
      - "--log-file=stdout"
      - "--min-port=${COTURN_MIN_PORT:-49152}"
      - "--max-port=${COTURN_MAX_PORT:-49172}"
      - "--use-auth-secret"
      - "--static-auth-secret=${COTURN_STATIC_AUTH_SECRET:-turn_secret}"
      - "--realm=${SYNAPSE_SERVER_NAME:-matrix.example.com}"
      - "--no-tls"
      - "--no-dtls"
      - "--no-cli"
      # Conditionally add --external-ip based on COTURN_EXTERNAL_IP value in entrypoint or wrapper script if complex logic needed.
      # For now, if COTURN_EXTERNAL_IP is set to an IP, it should be passed directly. If 'auto', coturn handles it.
      # Example: if [ "$COTURN_EXTERNAL_IP" != "auto" ]; then CMD_ARGS="$CMD_ARGS --external-ip=$COTURN_EXTERNAL_IP"; fi

  element:
    image: nginx:alpine
    container_name: voice-stack-element
    environment:
      SYNAPSE_SERVER_NAME: ${SYNAPSE_SERVER_NAME:-matrix.example.com}
      ELEMENT_JITSI_DOMAIN: ${ELEMENT_JITSI_DOMAIN:-meet.element.io}
      ELEMENT_VERSION: ${ELEMENT_VERSION:-v1.11.50}
      ELEMENT_WEB_DIR: ${ELEMENT_WEB_DIR:-/usr/share/nginx/html}
    volumes:
      - element_data:/usr/share/nginx/html
    networks:
      - voice-stack-network
    ports:
      - "${ELEMENT_PORT:-8080}:80"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80/config.json"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command:
      - sh
      - -c
      - |
        set -e
        WEB_DIR="/usr/share/nginx/html"
        CONFIG_FILE="$${WEB_DIR}/config.json"

        mkdir -p "$$WEB_DIR"

        if [ ! -f "$${WEB_DIR}/index.html" ] || [ ! -f "$$CONFIG_FILE" ]; then
          echo "Element web not found or config.json missing. Downloading Element $${ELEMENT_VERSION}..."
          wget -qO /tmp/element-web.tar.gz "https://github.com/vector-im/element-web/releases/download/$${ELEMENT_VERSION}/element-$${ELEMENT_VERSION}.tar.gz"
          
          rm -rf "$${WEB_DIR:?}/"* 
          tar -xzf /tmp/element-web.tar.gz -C "$$WEB_DIR" --strip-components=1
          rm /tmp/element-web.tar.gz          echo "Creating $$CONFIG_FILE..."
          # Create config.json using a simpler approach
          cat > "$$CONFIG_FILE" <<EOF
        {
            "default_server_config": {
                "m.homeserver": {
                    "base_url": "http://$${SYNAPSE_SERVER_NAME}:8008",
                    "server_name": "$${SYNAPSE_SERVER_NAME}"
                },
                "m.identity_server": {
                    "base_url": "https://vector.im"
                }
            },
            "brand": "Element",
            "integrations_ui_url": "https://scalar.vector.im/",
            "integrations_rest_url": "https://scalar.vector.im/api",
            "integrations_widgets_urls": [
                "https://scalar.vector.im/api/widgets"
            ],
            "hosting_signup_link": "https://element.io/get-started",
            "bug_report_endpoint_url": "https://element.io/bugreports/submit",
            "default_country_code": "GB",
            "show_labs_settings": false,
            "features": {
                "feature_groups": "labs",
                "feature_pinning": "labs",
                "feature_custom_status": "labs",
                "feature_custom_tags": "labs",
                "feature_state_counters": "labs"
            },
            "default_theme": "light",
            "room_directory": {
                "servers": [
                    "matrix.org"
                ]
            },
            "enable_presence_by_hs_url": {
                "https://matrix.org": false,
                "https://matrix-client.matrix.org": false
            },
            "setting_defaults": {
                "breadcrumbs": true,
                "UIFeature.voipCallExperience": true
            },
            "jitsi": {
                "preferred_domain": "$${ELEMENT_JITSI_DOMAIN}"
            }
        }
        EOF

          echo "Element configuration complete."
        else
          echo "Element web and config.json found. Skipping download and generation."
        fi
        
        echo "Starting Nginx for Element..."
        exec nginx -g 'daemon off;'

volumes:
  postgres_data:
  redis_data:
  synapse_data:
  media_store:
  coturn_data:
  element_data:

networks:
  voice-stack-network:
    driver: bridge
