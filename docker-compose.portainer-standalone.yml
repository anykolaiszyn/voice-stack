version: '3.8'

# Voice Stack for Portainer - Self-Contained Version
# This version creates all configuration inline without external files

services:
  postgres:
    image: postgres:15-alpine
    container_name: voice-stack-postgres
    environment:
      POSTGRES_DB: synapse
      POSTGRES_USER: synapse
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-synapse_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - voice-stack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synapse"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: voice-stack-redis
    volumes:
      - redis_data:/data
    networks:
      - voice-stack-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  synapse:
    image: matrixdotorg/synapse:latest
    container_name: voice-stack-synapse
    environment:
      SYNAPSE_SERVER_NAME: ${SERVER_NAME:-matrix.byte-box.org}
      SYNAPSE_REPORT_STATS: "no"
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-synapse_password}
      TURN_SECRET: ${TURN_SECRET:-change_me}
      REGISTRATION_SECRET: ${REGISTRATION_SECRET:-change_me}
      # Simple registration token - set this to enable token-based registration
      REGISTRATION_TOKEN: ${REGISTRATION_TOKEN:-}
    volumes:
      - synapse_data:/data
      - media_store:/media_store
    depends_on:
      - postgres
      - redis
    networks:
      - voice-stack-network
      - proxy-bridge
    ports:
      - "${SYNAPSE_PORT:-8008}:8008"
    restart: unless-stopped
    entrypoint: >
      sh -c "
        if [ ! -f /data/homeserver.yaml ]; then
          python -m synapse.app.homeserver --server-name=$${SYNAPSE_SERVER_NAME} --config-path=/data/homeserver.yaml --generate-config --data-directory=/data --report-stats=no &&
          if [ -n \"$${REGISTRATION_TOKEN}\" ]; then
            echo 'Setting up token-based registration...' &&
            sed -i 's/#enable_registration: false/enable_registration: true/' /data/homeserver.yaml &&
            sed -i 's/#registration_requires_token: false/registration_requires_token: true/' /data/homeserver.yaml &&
            echo 'registration_requires_token: true' >> /data/homeserver.yaml
          else
            echo 'Disabling public registration (family-safe mode)...' &&
            sed -i 's/#enable_registration: false/enable_registration: false/' /data/homeserver.yaml &&
            echo 'enable_registration: false' >> /data/homeserver.yaml &&
            echo 'registration_requires_token: true' >> /data/homeserver.yaml
          fi &&
          sed -i 's/#registration_shared_secret:.*/registration_shared_secret: \"$${REGISTRATION_SECRET}\"/' /data/homeserver.yaml &&
          echo 'Family-safe configuration settings...' &&
          echo 'allow_public_rooms_over_federation: false' >> /data/homeserver.yaml &&
          echo 'allow_public_rooms_without_auth: false' >> /data/homeserver.yaml &&
          echo 'enable_room_list_search: false' >> /data/homeserver.yaml &&
          echo 'allow_guest_access: false' >> /data/homeserver.yaml &&
          echo 'federation_domain_whitelist: []' >> /data/homeserver.yaml &&
          echo 'allow_device_name_lookup_over_federation: false' >> /data/homeserver.yaml &&
          echo 'allow_profile_lookup_over_federation: false' >> /data/homeserver.yaml &&
          echo 'limit_profile_requests_to_users_who_share_rooms: true' >> /data/homeserver.yaml &&
          echo 'require_auth_for_profile_requests: true' >> /data/homeserver.yaml &&
          echo 'block_non_admin_invites: false' >> /data/homeserver.yaml &&
          echo 'enable_search: false' >> /data/homeserver.yaml &&
          echo 'user_directory:' >> /data/homeserver.yaml &&
          echo '  enabled: false' >> /data/homeserver.yaml &&
          echo '  search_all_users: false' >> /data/homeserver.yaml &&
          echo 'turn_uris: [\"turn:coturn:3478?transport=udp\", \"turn:coturn:3478?transport=tcp\"]' >> /data/homeserver.yaml &&
          echo 'turn_shared_secret: \"$${TURN_SECRET}\"' >> /data/homeserver.yaml &&
          echo 'turn_user_lifetime: 1h' >> /data/homeserver.yaml &&
          echo 'turn_allow_guests: true' >> /data/homeserver.yaml &&
          echo 'database:' > /tmp/db.yaml &&
          echo '  name: psycopg2' >> /tmp/db.yaml &&
          echo '  args:' >> /tmp/db.yaml &&
          echo '    user: synapse' >> /tmp/db.yaml &&
          echo '    password: $${POSTGRES_PASSWORD}' >> /tmp/db.yaml &&
          echo '    database: synapse' >> /tmp/db.yaml &&
          echo '    host: postgres' >> /tmp/db.yaml &&
          echo '    cp_min: 5' >> /tmp/db.yaml &&
          echo '    cp_max: 10' >> /tmp/db.yaml &&
          sed -i '/^database:/,/^[a-z]/{ /^database:/r /tmp/db.yaml' -e '/^database:/,/^[a-z]/d; }' /data/homeserver.yaml &&
          echo 'redis:' >> /data/homeserver.yaml &&
          echo '  enabled: true' >> /data/homeserver.yaml &&
          echo '  host: redis' >> /data/homeserver.yaml &&
          echo '  port: 6379' >> /data/homeserver.yaml
        fi &&
        echo 'Matrix Synapse configured successfully. Admin account and registration tokens must be created manually after startup.' &&
        echo 'See ADMIN-SETUP.md and REGISTRATION-TOKENS.md for instructions.' &&
        exec python -m synapse.app.homeserver -c /data/homeserver.yaml
      "

  coturn:
    image: coturn/coturn:latest
    container_name: voice-stack-coturn
    ports:
      - "${TURN_PORT:-3478}:3478/udp"
      - "${TURN_PORT:-3478}:3478/tcp"
      - "${TURNS_PORT:-5349}:5349/udp"
      - "${TURNS_PORT:-5349}:5349/tcp"
      - "49152-49172:49152-49172/udp"
    environment:
      TURN_SECRET: ${TURN_SECRET:-change_me}
      TURN_USERNAME: ${TURN_USERNAME:-turn_user}
      TURN_PASSWORD: ${TURN_PASSWORD:-turn_password}
      SERVER_NAME: ${SERVER_NAME:-matrix.byte-box.org}
      EXTERNAL_IP: ${EXTERNAL_IP:-auto-detect}
    volumes:
      - coturn_data:/var/lib/coturn
    networks:
      - voice-stack-network
    restart: unless-stopped
    user: "0:0"
    command: >
      sh -c "
        echo 'Starting Coturn configuration...' &&
        mkdir -p /tmp/coturn &&
        echo 'listening-port=3478' > /tmp/coturn/turnserver.conf &&
        echo 'tls-listening-port=5349' >> /tmp/coturn/turnserver.conf &&
        echo 'listening-ip=0.0.0.0' >> /tmp/coturn/turnserver.conf &&
        if [ \"$${EXTERNAL_IP}\" != \"auto-detect\" ]; then
          echo 'external-ip=$${EXTERNAL_IP}' >> /tmp/coturn/turnserver.conf
        fi &&
        echo 'realm=turn.$${SERVER_NAME}' >> /tmp/coturn/turnserver.conf &&
        echo 'server-name=turn.$${SERVER_NAME}' >> /tmp/coturn/turnserver.conf &&
        echo 'fingerprint' >> /tmp/coturn/turnserver.conf &&
        echo 'lt-cred-mech' >> /tmp/coturn/turnserver.conf &&
        echo 'user=$${TURN_USERNAME}:$${TURN_PASSWORD}' >> /tmp/coturn/turnserver.conf &&
        echo 'use-auth-secret' >> /tmp/coturn/turnserver.conf &&
        echo 'static-auth-secret=$${TURN_SECRET}' >> /tmp/coturn/turnserver.conf &&
        echo 'total-quota=100' >> /tmp/coturn/turnserver.conf &&
        echo 'user-quota=12' >> /tmp/coturn/turnserver.conf &&
        echo 'max-bps=1000000' >> /tmp/coturn/turnserver.conf &&
        echo 'verbose' >> /tmp/coturn/turnserver.conf &&
        echo 'log-file=stdout' >> /tmp/coturn/turnserver.conf &&
        echo 'simple-log' >> /tmp/coturn/turnserver.conf &&
        echo 'no-multicast-peers' >> /tmp/coturn/turnserver.conf &&
        echo 'no-loopback-peers' >> /tmp/coturn/turnserver.conf &&
        echo 'pidfile=/tmp/coturn/turnserver.pid' >> /tmp/coturn/turnserver.conf &&
        echo 'userdb=/tmp/coturn/turnuserdb.conf' >> /tmp/coturn/turnserver.conf &&        chmod 644 /tmp/coturn/turnserver.conf &&
        echo 'Configuration file created:' &&
        cat /tmp/coturn/turnserver.conf &&
        echo 'Starting Coturn server...' &&
        turnserver -c /tmp/coturn/turnserver.conf
      "

  element-web:
    image: vectorim/element-web:latest
    container_name: voice-stack-element
    user: root
    environment:
      - SERVER_NAME=${SERVER_NAME:-matrix.byte-box.org}
    depends_on:
      - synapse
    networks:
      - voice-stack-network
      - proxy-bridge
    ports:
      - "${ELEMENT_PORT:-8080}:80"
    restart: unless-stopped
    volumes:
      - element_config:/app/config
    command: >
      sh -c "
        echo 'Configuring Element Web...' &&
        mkdir -p /app/config &&        chmod 755 /app/config &&
        cat > /app/config/config.json << EOF
        {
          \"default_server_config\": {
            \"m.homeserver\": {              \"base_url\": \"http://synapse:8008\",
              \"server_name\": \"${SERVER_NAME}\"
            },
            \"m.identity_server\": {
              \"base_url\": \"https://vector.im\"
            }
          },
          \"disable_custom_urls\": false,
          \"disable_guests\": true,
          \"disable_login_language_selector\": false,
          \"disable_3pid_login\": false,
          \"brand\": \"Element\",
          \"integrations_ui_url\": \"https://scalar.vector.im/\",
          \"integrations_rest_url\": \"https://scalar.vector.im/api\",
          \"integrations_widgets_urls\": [
            \"https://scalar.vector.im/_matrix/integrations/v1\",
            \"https://scalar.vector.im/api\",
            \"https://scalar-staging.vector.im/_matrix/integrations/v1\",
            \"https://scalar-staging.vector.im/api\",
            \"https://scalar-staging.riot.im/scalar/api\"
          ],
          \"bug_report_endpoint_url\": \"https://element.io/bugreports/submit\",
          \"uisi_autorageshake_app\": \"element-auto-uisi\",
          \"showLabsSettings\": true,
          \"piwik\": false
        }
        EOF
        chmod 644 /app/config/config.json &&
        echo 'Element Web configuration created.' &&
        echo 'Starting Element Web server...' &&
        exec /docker-entrypoint.sh
      "
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  voice-stack-network:
    driver: bridge
  proxy-bridge:
    driver: bridge
    external: false

volumes:
  postgres_data:
  redis_data:
  synapse_data:
  media_store:
  coturn_data:
  element_config:
